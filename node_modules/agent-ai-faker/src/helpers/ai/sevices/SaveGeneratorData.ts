import cohere from './generator/cohereClient';
import { exportData } from '../sevices/ExportFunctions';
import path from 'path';

interface FakeDataOptions {
    purpose: string; // Purpose of the fake data (e.g., testing, training, demo)
    format: 'JSON' | 'CSV'; // Desired output format
    fields: string[]; // List of fields/attributes (e.g., name, age, address)
    volume: number; // Number of records needed
    constraints: string; // Specific rules or patterns for the data
}

export async function generateFakeData(options: FakeDataOptions): Promise<void> {
    const { purpose, format, fields, volume, constraints } = options;

    // Validate format
    if (format !== 'JSON' && format !== 'CSV') {
        throw new Error(`Unsupported format: ${format}`);
    }

    // Construct prompt for Cohere API
    const prompt = `Generate fake data for ${purpose} in ${format} format with fields: ${fields.join(", ")}. Volume: ${volume} records. Constraints: ${constraints}.`;

    try {
        const response = await cohere.generate({
            model: 'command',
            prompt,
            maxTokens: 500,
            temperature: 0.7,
        });

        const rawData = response.generations[0].text;
        let data: any;

        try {
            data = JSON.parse(rawData); // Attempt to parse as JSON
        } catch (parseError) {
            console.error("Failed to parse generated data:", parseError);
            throw new Error("Generated data is not in the expected format.");
        }

        // Export data to file
        const filename = path.join('exports', `${purpose}_${new Date().toISOString().replace(/:/g, '-')}.${format.toLowerCase()}`);
        await exportData({ data, filename, format });

    } catch (error) {
        console.error("Error generating or exporting fake data:", error);
        throw error;
    }
}
