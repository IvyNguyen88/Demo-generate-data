import { CohereClient } from 'cohere-ai';
import * as fs from 'fs/promises';
import * as path from 'path';
import readline from 'readline/promises';
import { stdin as input, stdout as output } from 'process';

// Initialize Cohere client with your API key
const cohere = new CohereClient({
  token: 'YGRYAxxeTpWW4OBBdthd3s8EKEtd1j6WVWQwDv7J',
});

const rl = readline.createInterface({ input, output });

async function askQuestion(query: string): Promise<string> {
  try {
    const answer = await rl.question(query);
    return answer.trim(); 
  } catch (error) {
    console.error('Error reading input:', error);
    return ''; 
  }
}

// Function to generate a Cucumber BDD scenario using Cohere Chat API
export async function generateCucumberBDD(requirement: string): Promise<string> {
  try {
    const response = await cohere.chat({
      message: `Generate a Cucumber BDD test scenario in Gherkin syntax for the following requirement: "${requirement}". Include Feature and Scenario sections.`,
      model: 'command-nightly',
      maxTokens: 200,
      temperature: 0.7,
    });

    let generatedText = response.text.trim();
    generatedText = cleanUpBDDResponse(generatedText);
    return correctBDDFormat(generatedText, requirement);
  } catch (error) {
    console.error('Error generating BDD scenario:', (error as Error).message);
    throw error;
  }
}

// Clean up unnecessary content from the generated response
function cleanUpBDDResponse(bddScenario: string): string {
  return bddScenario
    .replace(/```/g, '') // Remove code block markers
    .replace(/^\s+|\s+$/g, '') // Trim leading/trailing whitespace
    .replace(/\n+/g, '\n'); // Normalize line breaks
}

// Ensure proper Gherkin syntax and structure
function correctBDDFormat(bddScenario: string, requirement: string): string {
  const featureHeader = `Feature: User should be able to ${requirement}\n\n`;

  // Ensure Scenario section exists
  if (!bddScenario.includes('Scenario:')) {
    return featureHeader + `  Scenario: Validate ${requirement}\n` + bddScenario
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.match(/^(Given|When|Then|And|But)/))
      .map(line => `    ${line}`)
      .join('\n');
  }

  return featureHeader + bddScenario
    .split('\n')
    .map(line => {
      if (line.startsWith('Scenario:')) return `  ${line.trim()}`;
      if (line.match(/^(Given|When|Then|And|But)/)) return `    ${line.trim()}`;
      return line.trim();
    })
    .join('\n');
}

// Save the BDD scenario to a .feature file with user approval
export async function saveBDDScenarioToFile(comment: string, fileName: string, filePathParam: string) {
  let isSatisfied = false;
  let userComment = comment;

  try {
    while (!isSatisfied) {
      const scenario = await generateCucumberBDD(userComment);
      console.log('\nGenerated Scenario:\n', scenario);

      let userInput = await askQuestion('\nAre you satisfied with this test case? (yes/no): ');

      // Handle empty input
      if (!userInput) {
        console.log('No input provided. Please answer "yes" or "no".');
        continue; // Ask again
      }

      userInput = userInput.toLowerCase();

      if (userInput === 'yes') {
        isSatisfied = true;
        const featureFilePath = path.join(filePathParam, `${fileName}.feature`);

        // Ensure directory exists
        await fs.mkdir(filePathParam, { recursive: true });

        // Save file with proper formatting
        await fs.writeFile(featureFilePath, `${scenario.trim()}\n`);
        console.log(`\nBDD scenario saved to: ${featureFilePath}`);
        break;
      } else if (userInput === 'no') {
        userComment = await askQuestion('Please provide your updated requirement: ');
      } else {
        console.log('Invalid input. Please answer "yes" or "no".');
      }
    }
  } catch (error) {
    console.error('Fatal error during generation/saving:', error);
  } finally {
    rl.close();
  }
}

// Example usage
(async () => {
  try {
    const requirement = await askQuestion('Enter your requirement for the test scenario: ');
    if (!requirement.trim()) {
      console.log('No requirement provided. Exiting.');
      return;
    }
    await saveBDDScenarioToFile(requirement, 'login_test', 'src/helpers/ai/features');
  } catch (error) {
    console.error('Unexpected error:', error);
  } finally {
    rl.close();
  }
})();
