import { CohereClient } from 'cohere-ai';
import * as fs from 'fs';

const cohere = new CohereClient({
  token: 'YGRYAxxeTpWW4OBBdthd3s8EKEtd1j6WVWQwDv7J', 
});

type Step = {
  keyword: string;
  step: string;
};

// Parse the .feature file to extract Given-When-Then steps
export function parseFeatureFile(filePath: string): Step[] {
  try {
    const featureContent = fs.readFileSync(filePath, 'utf8');
    const stepRegex = /(Given|When|Then|And|But)\s+(.*)/g;
    const steps: Step[] = [];
    let match: RegExpExecArray | null;
    // Extract steps using regex
    while ((match = stepRegex.exec(featureContent)) !== null) {
      const [, keyword, step] = match;
      if (keyword && step) {
        steps.push({ keyword: keyword.trim(), step: step.trim() });
      }
    }
    return steps.filter((step, index, self) =>
      index === self.findIndex((s) => s.step === step.step)
    ); // Remove duplicates
  } catch (error) {
    console.error('Error parsing feature file:', error);
    return [];
  }
}

// Map "And" and "But" to "When" for step definition generation
function mapKeyword(keyword: string): string {
  return keyword === 'And' || keyword === 'But' ? 'When' : keyword;
}
// Capitalize the first letter of the keyword
function capitalizeKeyword(keyword: string): string {
  return keyword.charAt(0).toUpperCase() + keyword.slice(1);
}
// Generate Playwright step definitions using Cohere's Chat API
export async function generateStepDefinitions(steps: Step[], outputPath: string): Promise<void> {
  const uniqueKeywords = new Set<string>(['Given', 'When', 'Then']); // Always include necessary keywords

  try {
    let classContent = '';
    classContent += "import { ";

    for (const { keyword } of steps) {
      uniqueKeywords.add(mapKeyword(keyword)); // Map And/But to When
    }

    // Generate import statement with unique keywords
    const importKeywords = Array.from(uniqueKeywords);
    classContent += importKeywords.join(', ') + " } from '@cucumber/cucumber';\n";
    classContent += "import { expect } from '@playwright/test';\n";
    classContent += "import { page } from './pageObjects'; // Adjust import as needed\n\n";

    for (const { keyword, step } of steps) {
      const mappedKeyword = mapKeyword(keyword); // Map And/But to When
      const capitalizedKeyword = capitalizeKeyword(mappedKeyword); // Capitalize keyword
      const formattedStep = step.replace(/'/g, "\\'"); // Escape single quotes
      const stepTemplate = await generateStepTemplate(capitalizedKeyword, formattedStep);

      if (stepTemplate) { // Only add if a valid template is generated
        classContent += stepTemplate + '\n';
      }
    }

    // Write the generated step definitions to a .ts file
    fs.writeFileSync(outputPath, classContent.trim(), 'utf8');
    console.log(`Generated step definitions written to ${outputPath}`);
  } catch (error) {
    console.error('Error generating step definitions:', error);
  }
}

// Generate step template using Cohere's Chat API
async function generateStepTemplate(keyword: string, step: string): Promise<string> {
  const prompt = `Generate a Playwright step definition for the following Gherkin step:
  Keyword: ${keyword}
  Step: ${step}

  Return only the TypeScript code snippet without explanations, imports, or backticks. Assume the page object is available as \`page\`.`;

  try {
    const response = await cohere.chat({
      message: prompt,
      model: 'command-nightly', // Use the appropriate model
      maxTokens: 150,
      temperature: 0.3,
    });

    const generatedCode = response.text.trim();
    if (generatedCode.includes('Error') || generatedCode.includes('import')) {
      console.warn(`Skipping step "${step}" due to generation error or invalid content.`);
      return ''; // Skip invalid steps
    }

    return `${keyword}('${step}', async () => {\n  ${generatedCode}\n});\n`;
  } catch (error) {
    console.error(`Error generating step for "${step}":`, error);
    return ''; // Return empty string on error
  }
}

// Example usage with updated file paths
const featureFilePath = 'src/helpers/ai/features/login_test.feature';
const outputFilePath = 'src/helpers/ai/steps/loginSteps.ts';

(async () => {
  const steps = parseFeatureFile(featureFilePath);
  if (steps.length > 0) {
    await generateStepDefinitions(steps, outputFilePath);
  } else {
    console.log('No steps found in the feature file.');
  }
})();
