import * as fs from 'fs';
import * as path from 'path';
import { createObjectCsvWriter } from 'csv-writer';

interface ExportOptions {
    data: any;
    filename: string;
    format: 'JSON' | 'CSV' | 'plain text' | string; // Allow custom formats
}

/**
 * Exports data to a file based on the specified format.
 * @param options Export options including data, filename, and format.
 */
export async function exportData({ data, filename, format }: ExportOptions): Promise<void> {
    const dir = path.dirname(filename);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }

    try {
        if (format === 'JSON') {
            fs.writeFileSync(filename, JSON.stringify(data, null, 2));
            console.log(`Data exported to ${filename} in JSON format.`);
        } else if (format === 'CSV') {
            if (!Array.isArray(data) || data.length === 0) {
                throw new Error('Invalid data for CSV export.');
            }

            const headers = Object.keys(data[0]).map((key) => ({ id: key, title: key }));
            const csvWriter = createObjectCsvWriter({ path: filename, header: headers });
            await csvWriter.writeRecords(data);
            console.log(`Data exported to ${filename} in CSV format.`);
        } else if (format === 'plain text') {
            fs.writeFileSync(filename, data.toString());
            console.log(`Data exported to ${filename} in plain text format.`);
        } else {
            // Handle custom or unsupported formats
            if (typeof data === 'string') {
                fs.writeFileSync(filename, data);
                console.log(`Data exported to ${filename} in custom format: ${format}`);
            } else {
                throw new Error(`Unsupported format: ${format}`);
            }
        }
    } catch (error) {
        console.error(`Failed to export data to ${filename}:`, error);
        throw error;
    }
}


