import { CohereClient } from 'cohere-ai';
import * as fs from 'fs';

type Step = {
  keyword: string;
  stepText: string; 
};

export class StepDefinitionGenerator {
  private cohere: CohereClient;

  constructor(apiKey: string) {
    this.cohere = new CohereClient({ token: apiKey });
  }

  /**
   * Parse the .feature file to extract Given-When-Then steps.
   * @param {string} filePath - Path to the feature file.
   * @returns {Step[]} - Array of extracted steps.
   */
  parseFeatureFile(filePath: string): Step[] {
    const featureContent = fs.readFileSync(filePath, 'utf8');
    const stepRegex = /(Given|When|Then|And|But)\s+(.*)/g;
    const steps: Step[] = [];
    let match: RegExpExecArray | null;

    while ((match = stepRegex.exec(featureContent)) !== null) {
      const [, keyword, stepText] = match;
      steps.push({ keyword: keyword.trim(), stepText: stepText.trim() });
    }

    // Remove duplicates while preserving order
    return Array.from(new Map(steps.map(step => [step.stepText, step])).values());
  }

  /**
   * Map "And" and "But" keywords to "When" for step definition generation.
   * @param {string} keyword - Original keyword.
   * @returns {string} - Mapped keyword.
   */
  private mapKeyword(keyword: string): string {
    return ['And', 'But'].includes(keyword) ? 'When' : keyword;
  }

  /**
   * Generate Playwright step definitions and write to a file.
   * @param {Step[]} steps - Array of steps to generate.
   * @param {string} outputPath - Path to the output file.
   */
  async generateStepDefinitions(steps: Step[], outputPath: string): Promise<void> {
    const uniqueKeywords = new Set<string>(['Given', 'When', 'Then']); // Base keywords

    for (const { keyword } of steps) {
      uniqueKeywords.add(this.mapKeyword(keyword)); // Add mapped keywords
    }

    let classContent = '';
    // Generate import statement with unique keywords
    classContent += `import { ${Array.from(uniqueKeywords).join(', ')} } from '@cucumber/cucumber';\n`;
    classContent += "import { expect } from '@playwright/test';\n";
    classContent += "import { page } from './pageObjects'; // Adjust import as needed\n\n";

    for (const { keyword, stepText } of steps) {
      const mappedKeyword = this.mapKeyword(keyword);
      const formattedStep = stepText.replace(/'/g, "\\'"); // Escape single quotes
      const stepTemplate = await this.generateStepTemplate(mappedKeyword, formattedStep);
      if (stepTemplate) {
        classContent += stepTemplate + '\n';
      }
    }

    fs.writeFileSync(outputPath, classContent.trim(), 'utf8');
    console.log(`Generated step definitions written to ${outputPath}`);
  }

  /**
   * Generate a step template using Cohere's Chat API.
   * @param {string} keyword - Mapped keyword.
   * @param {string} stepText - Step text.
   * @returns {Promise<string>} - Generated step definition code.
   */
  private async generateStepTemplate(keyword: string, stepText: string): Promise<string> {
    const prompt = `Generate a Playwright step definition for the following Gherkin step:
    Keyword: ${keyword}
    Step: ${stepText}

    Return only the TypeScript code snippet without explanations, imports, or backticks. 
    Assume the page object is available as \`page\`.`;

    try {
      const response = await this.cohere.chat({
        message: prompt,
        model: 'command-nightly',
        maxTokens: 200,
        temperature: 0.3,
      });

      const generatedCode = response.text.trim();
      if (generatedCode.includes('Error') || generatedCode.includes('import')) {
        console.warn(`Skipping step "${stepText}" due to generation error or invalid content.`);
        return '';
      }

      return `${keyword}('${stepText}', async () => {\n  ${generatedCode}\n});`;
    } catch (error) {
      console.error(`Error generating step for "${stepText}":`, error);
      return '';
    }
  }
}


